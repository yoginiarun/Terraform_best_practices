#################################################
# Provider
#################################################

provider "aws" {
        profile = "${var.profile}"
        region = "ap-south-1"
}

#################################################
# Resources
#################################################

##1. create s3 bucket with versioning, encryption, lifecyle, public access block

resource "aws_s3_bucket" "terraform_state" {
        bucket = "terraform-up-and-running-state209011"
        versioning {
                enabled = true
        }
        server_side_encryption_configuration {
                rule {
                        apply_server_side_encryption_by_default {
                                sse_algorithm = "AES256"
    }
        }
}
  # Prevent accidental deletion of this S3 bucket
  lifecycle {
    prevent_destroy = true
  }
}

resource "aws_s3_bucket_public_access_block" "public_access" {
  bucket                  = aws_s3_bucket.terraform_state.id
  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}

## 2. Create a DynamoDB table to use for locking
resource "aws_dynamodb_table" "terraform_locks" {
  name         = "terraform-up-and-running-locks"
  billing_mode = "PAY_PER_REQUEST"
  hash_key     = "LockID"

  attribute {
    name = "LockID"
    type = "S"
  }
}


## 3. Configure a backend for this Instance using the S3 bucket and DynamoDB table

terraform {
  backend "s3" {
    # Replace this with your bucket name!
    bucket         = "terraform-up-and-running-state209011"
    key            = "workspaces-example/terraform.tfstate"
    region         = "ap-south-1"

    # Replace this with your DynamoDB table name!
    dynamodb_table = "terraform-up-and-running-locks"
    encrypt        = true
  }
}




















