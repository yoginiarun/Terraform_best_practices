###############################################################################
## Terraform for_each loop and count
###############################################################################


*  Here we will discuss about meta arguments count and for_each. To manage several of the same resources, you can use either count or for_each, which removes the need to write a separate block of code for each one.
There are actually five meta-arguments:

•	depends_on
•	count
•	for_each
•	provider
•	lifecycle



*  How to use Terraform Count

The count meta-argument accepts a whole number and creates the number of instances of the resource specified.

variable "aws_IAM_user" {
    type = list(string)
    default = [ "user1", "user2", "user3" ]
    }

resource "aws_iam_user" "users" {
        count = length(var.aws_IAM_user)
        name = var.aws_IAM_user[count.index]        
        }


*  How to use For_each

The for_each is a little special in terraforming and you can not use it on any collection variable.  
It can only be used on set(string) or map(string). The reason why for_each does not work on list(string) is because a list can contain duplicate values but if you are using set(string) or map(string) then it does not support duplicate values.

variable "aws_IAM_user" {
    type = set(string)
    default = [ "user1", "user2", "user3" ]
    }


resource "aws_iam_user" "users" {
        for_each = var.aws_IAM_user
        name = each.value
}

After applying terraform configuration, it will create 3 IAM users.

  # aws_iam_user.users["user1"] will be created
  + resource "aws_iam_user" "users" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "user1"
      + path          = "/"
      + tags_all      = (known after apply)
      + unique_id     = (known after apply)
    }

  # aws_iam_user.users["user2"] will be created
  + resource "aws_iam_user" "users" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "user2"
      + path          = "/"
      + tags_all      = (known after apply)
      + unique_id     = (known after apply)
    }

  # aws_iam_user.users["user3"] will be created
  + resource "aws_iam_user" "users" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "user3"
      + path          = "/"
      + tags_all      = (known after apply)
      + unique_id     = (known after apply)
    }
